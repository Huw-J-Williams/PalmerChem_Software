GitHub Commands
===============

Generating a Personal Access Token (PAT) / Authenticating to GitHub via SSH
-----------------------------------------------------------------------

    1. Navigate to your GitHub homepage.

    2. Click on your profile in the top right hand side of the screen.

    3. Select "Settings"

    4. Click on "Developer Settings" at the bottom of the left-hand column.

    5. Click "Personal access tokens"

    6. Click "Tokens (classic)"

    7. Click "Generate new token" and select "Generate new token (classic)"

    8. In "Note" give a name for your token (e.g., archie-token).

    9. Select "No expiration" in the "Expiration" drop down menu.

    10. Tick all of the boxes in "Select scopes" (if you tick the parent boxes all of the ones below automatically get checked)

    11. Copy the generated token. Should look like this:
            tok_1CDh3csE3jo0NnjoyzYM5ghTaIBoqo0zIV1n
    
    12. In your home directory in your workspace (aka ARCHIE) make a .txt file to contain this token (e.g., GitHub_Token.txt)

    ***IMPORTANT***
        This key should NOT be shared, and when cloning repositories you use this instead of your GitHub password

	ALTERNATIVELY, you can instead connect your GitHub account to Archie/your computer via SSH, meaning that you won't need to (ever) enter a PAT:
	
	1. Run the command ssh-keygen on an (Archie) terminal. Rename it as you see fit

	2. The command will output a weird picture and a file path (to whatever you named it)

	3. Run cat <file_path>/<file_name>.pub. Copy the entire string that is returned

	4. Navigate to your GitHub settings.

	5. Click on "SSH and GPG Keys", then click "New SSH Key"

	6. Name the key, and paste the previously-copied long string (from Step 3) into the textbox

	7. Go back to the terminal and type ssh -T git@github.com - you should get a response that greets you with your GitHub username. You're now authenticated! 


Initial Setup
-------------

    1. Navigate to the PalmerChem_Software repository in the Huw.J.Williams Organisation page:
        (https://github.com/Huw-J-Williams/PalmerChem_Software)

    2. Click the green "Code" button
        (< > Code)

    3. Navigate to the HTTPS option below "Clone" (NOTE: If you have authenticated via SSH instead of using a PAT, you'll want to clone using the SSH option instead!!)

    4. Copy the URL

    5. Open up your bash terminal on the device you will be developing the code on (typically ARCHIE account) and run the following code:
        git clone <URL>

    6. Enter your GitHub username when prompted, and your GitHub personal access token when asked for your password

    7. In your newly setup PalmerChem_Software directory run the following two lines of code:

        Please change text inside the quotation marks (" ")
        
        git config --global user.name "<username>"
        git config --global user.email "<email>"

    8. Verify the newly updated details using:

        git config --global --list

    9. Make and move to your own development branch by running the following code:

        Change <name> to your name:
        
        git checkout -b dev-<name>


Pulling from GitHub
-------------------

    1. Naviagte to your git initialised repository (PalmerChem_Software)

    2. Run the following code:
    git pull origin main

        NOTE:
            origin = name of remote repository aka GitHub
            main = the branch you are pulling from

            At times you may want to pull from the "dev" branch, or another. If so replace
            main with the branch of the repository you wish to pull from.

            Sometimes you may be asked to pull from the branch first in which case you can run the folloing code
            before you push up to the repository:
            
            git pull origin dev --rebase

            Rebase essentially reapplies your local commits on top of the updated branch. It avoids unnecessary merge 
            commits and keeps a cleaner history. You may get a conflict message in the terminal. This happens when one of the files
            you are updating has already been changed since your last pull. To fix this open up the file causing the 
            issues and resolve the conflicts. 
            Example:

            #       def example_function():
            #       <<<<<<<< HEAD
            #       print("New code which is not in your current codebase")
            #       ======
            #       print("Old code which is in your current codebase")
            #       >>>>>>>> My local changes

            Here you can remove one, combine, or rewrite the line to:
            #       def example_function():
            #       print("Code which you want to keep in the function")

            If this happens you then need to add the file back onto the staging area and continue the rebase using:
                
                git rebase --continue
            
            Or abort using:

                git rebase --skip

            Or, if you want to remove your conflicting commit and continue:

                git rebase --skip


Pushing to GitHub
-----------------

    1. Naviagte to your git initialised repository (PalmerChem_Software)

    2. Change to the development branch

        Change <name> to your name:

        git checkout dev-<name>

    3. Add changes made to the staging area using the following code:

        Change <file> to the file you wish to add
        
        git add <file>

        NOTE:
            . = adds everything in the current directory to the stage
            *.py = adds all files with .py extension (works for all extensions, e.g., .txt, .sh)

            You can add multiple files by simply doing:

            git add <file_1> <file_2> ... <file_n>

            To add all changes made in the repository use:
            git add -A 
            
            To add all changes made in a directory use:
            git add <path_to_dir>

    4. (Optional) Check staging area using the following code:

        git status

    5. Commit the staged changes with a message using the following code:

        Please change text inside the quotation marks (" ")

        git commit -m "Commit Message"

        NOTE:
            The more precise the commit message, the easier it makes for everyone to understand what happened.
            For example

            git commit -m "Added RMSE, R2, SDEP and Bias calculation to PerformanceCalculator function"

            is much better than

            git commit -m "Updated PerformanceCalculator"

    6. Push up new code to github using the following code:

        git push origin dev-<name>

        NOTE:
            origin = name of remote repository aka GitHub
            dev-<name> = the branch you are pushing to


Creating Pull Request
---------------------

    1. Navigate to the PalmerChem_Software repository in the Huw.J.Williams Organisation page:
        (https://github.com/Huw-J-Williams/PalmerChem_Software)

    2. Click the "Pull Requests" tab

    3. Click "New pull request" button

    4. Under "base" select the repository you wish to pull changes to (e.g, main)

    5. Under "compare" select the repository you wish to pull changes from (e.g., dev-<name>).
    
    You should now see your commit messages, files changed and contributors to this. Check that the changes you want to
    add to the main repository are present.

    6. Click "Create pull request"

    7. Add a title for your pull request.

    8. Add a description of what you changed and why

    9. Click the green "Create pull request" button.

    10. Notify an admin of the repository. Changes can be approves, rejected and corrections suggested accordingly.


Common FAQs/Tips
----------------

    1. Before working on code, make sure your version is up to date by running:

        git pull origin main

    2. Make sure you are on the correct branch before pushing any changes up by running:
        
        git branch

    3. During pull requests your branch may be deleted meaning that pushing up to that branch will fail.
    To get around this, before adding and staging any commits run:

        git checkout -b dev-<name>

    This will make a branch of "main".

    
