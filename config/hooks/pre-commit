#!/bin/bash

echo "Updating dependencies before committing..."

# Move up two levels from `.git/hooks/` to reach the project root
REPO_ROOT="$(cd "$(dirname "${BASH_SOURCE[0]}")"/../.. && pwd)"

# Define virtual environment location
ENV_NAME="PCenv"
CONFIG_DIR="$REPO_ROOT/config"

# Define hooks location
HOOKS = "$CONFIG_DIR/hooks"
GIT_HOOKS_DIR = "../../.git/hooks/"

# Ensure .git/hooks exists
if [ -d "../../.git" ]; then
    mkdir -p "$GIT_HOOKS_DIR"

    # Loop through all hook scripts in config/hooks/
    for hook in "$HOOKS_SOURCE_DIR"/*; do
        hook_name=$(basename "$hook")  # Extract hook name (e.g., "pre-commit")
        hook_dest="$GIT_HOOKS_DIR/$hook_name"

        # Create a symlink for each hook if not already linked
        if [ ! -L "$hook_dest" ]; then
            echo "üîó Linking $hook_name hook..."
            ln -s "$hook" "$hook_dest"
            chmod +x "$hook_dest"
        else
            echo "‚úÖ $hook_name hook is already linked!"
        fi
    done

    echo "‚úÖ All Git hooks have been linked successfully!"
else
    echo "‚ö†Ô∏è Git directory not found. Ensure you're inside a Git repository."
fi



ENV_PATH="$ENV_LOCATION/$ENV_NAME"
REQUIREMENTS_FILE="$CONFIG_DIR/requirements.txt"

echo "üîç Looking for virtual environment at: $ENV_PATH"

# Ensure the virtual environment exists
if [ -d "$ENV_PATH" ]; then
    echo "üì¶ Virtual environment found! Freezing dependencies into $REQUIREMENTS_FILE..."
    
    # Detect OS and activate the environment accordingly
    if [[ "$OSTYPE" == "darwin"* || "$OSTYPE" == "linux-gnu"* ]]; then
        source "$ENV_PATH/bin/activate"
    elif [[ "$OSTYPE" == "msys" || "$OSTYPE" == "cygwin" || "$OSTYPE" == "win32" ]]; then
        source "$ENV_PATH/Scripts/activate"
    else
        echo "‚ùå Unsupported OS: $OSTYPE"
        exit 1
    fi

    # Freeze dependencies to config/requirements.txt
    pip freeze > "$REQUIREMENTS_FILE"
    git add "$REQUIREMENTS_FILE"

    # Ensure config/requirements.txt is being tracked
    if ! git ls-files --error-unmatch "$REQUIREMENTS_FILE" >/dev/null 2>&1; then
        git add "$REQUIREMENTS_FILE"
        echo "‚úÖ requirements.txt is now tracked in config/"
    else
        echo "‚úÖ requirements.txt was already tracked."
    fi
else
    echo "‚ö†Ô∏è Virtual environment '$ENV_NAME' NOT found at '$ENV_PATH'! Skipping dependency update."
    exit 1  # Stop execution if the environment is missing
fi

echo "‚úÖ Dependencies updated! Proceeding with commit..."
